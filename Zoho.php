<?php

if (!defined('ROOT_DIR')) define('ROOT_DIR', '/var/www/html/class/log/');
// if (!defined('ROOT_DIR')) define('ROOT_DIR', '/home/etvoilacfy/www/');
//
require_once(ROOT_DIR.'../vendor/autoload.php');
// require_once(ROOT_DIR.'refresh.php');
// require_once(ROOT_DIR.'refreshInvoice.php');

require_once('log.php');

/*
 * Class Zoho
 *
 * This class is something that get or update from zoho.
 * The api take some time to respond, so do not overuse it.
 *
 * for all update, we need the id (the one generated by zoho) integred in the data
 * exemple: array(data) ['id'=> 99037000000000453, 'etc' => '...'];
 *
 */
final class Zoho {

    private $api_domain = null;
    private $defaultHeader = null;
    private $db = null;
    private $token = null;
    private $expiration_time = null;
    private $historic = array();

    /* ----- CRM ----- */
    const HELPER      = 'Helpers';
    const CLIENT      = 'Contacts';
    const MISSION     = 'Prestations';
    const WEB_CONTACT = 'Contacts-web';

    public function __construct($db)
    {
        $this->db = $db;
        $this->token = null;
    }

    public function __destruct()
    {
        $this->token = null;
        $this->db = null;
    }

    private function refresh_token()
    {
        $req = $this->db->query("SELECT accounts_domain_zoho, client_id_zoho, client_secret_zoho, refresh_token_zoho FROM CLE;");
        $data = $req->fetch();

        $url = $data['accounts_domain_zoho']."/oauth/v2/token";

        $client_id = $data['client_id_zoho'];
        $client_secret = $data['client_secret_zoho'];
        $refresh_token = $data['refresh_token_zoho'];

        $grant_type = 'refresh_token';

        $header = [
            'form_params' => [
                'client_id' => $client_id,
                'client_secret' => $client_secret,
                'refresh_token' => $refresh_token,
                'grnt_type' => $grant_type
            ]
        ];

        $client = new \GuzzleHttp\Client();

        $result = $client->request('POST', $url, $header);

        if ($resultat->getStatusCode() == 200) {
            $json_content = json_decode($resultat->getBody(), true);

            if (isset($json_content['access_token'])) {
                $access_token = $json_content['access_token'];

                $this->token = $access_token;
                $this->expiration_token = (new \Datetime())->getTimestamp() + (50 * 60); // 50 minutes * 60 secondes

                $req = $this->db->prepare('UPDATE CLE SET access_token_zoho = :token, expiration_zoho = NOW() + INTERVAL 50 MINUTE WHERE id = 1;');
                $req->bindParam(':token', $access_token);
                $req->execute();

                return (true);
            } else {
                printLog(__METHOD__, $res->getBody(), 2);
            }
        } else {
            printLog(__METHOD__, "error refreshing token: ".$resultat->getStatusCode(), 1);
        }
    }

    private function getCleApi()
    {
        if ($this->expiration_token == NULL || $this->token == NULL) {

            $req = $this->db->query('SELECT `access_token_zoho`, `api_domain_zoho`, expiration_zoho FROM `CLE`;');
            $data = $req->fetch();
            $this->expiration_token = (new \Datetime($data["expiration_zoho"]))->getTimestamp();
            $this->token = $data['access_token_zoho'];
            $this->api_domain = $data['api_domain_zoho'];
            $this->defaultHeader = [
                'headers' => [
                    'Authorization' => 'Bearer '.$this->token,
                    'Cache-Control' => 'no-cache'
                ]
            ];
        }

        $now = (new \Datetime())->getTimestamp();

        if ($now >= $this->expiration_token)
            $this->refresh_token();
    }

    private function getConstants()
    {
        $reflection = new ReflectionClass($this);
        return ($reflection->getConstants());
    }

    public function isModule($module)
    {
        return (array_search($module, $this->getConstants()) === false ? false : true);
    }

    public function rollBack()
    {
        $last = null;
        $result = true;
        foreach ($entry as $historic) {
            if ($entry['method'] == 'POST') {
                if ($last === null)
                    $result = false;
                else
                    $this->updateToCRM($last['module'], $last['data']);
            }
            $last = $entry;
        }
        return ($result);
    }

    private function gestionRequest($method, $url, $header = NULL)
    {
        if ($header == NULL)
            $header = $this->defaultHeader;
        $method = strtoupper($method);
        $defaultMethod = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'COPY', 'HEAD', 'OPTIONS', 'LINK', 'UNLINK', 'PURGE', 'LOCK', 'UNLOCK', 'PROPFIND', 'VIEW'];
        if (array_search($method, $defaultMethod) === false) {
            printLog(__METHOD__, "Invalid method: {$method}", 1);
            throw new ORMException("Invalid method request: {$method}");
        }

        $client = new \GuzzleHttp\Client();

        try {
            $res = $client->request($method, $url, $header);
        } catch (Exception $e) {
            echo "url: {$url}\n";
            if (isset($res)) {
                if ($res->getStatusCode() == 404) {
                    printLog(__METHOD__, 'URL invalid: "'.$url.'".', true);
                    throw new ZohoException('Url invalid.');
                }
            } else {
                printLog(__METHOD__, "Error guzzlehttp: {$e->getMessage()}\nurl: {$url}", 1);
                throw $e;
            }
        }

        return ($res);
    }

    /* --------------- C  R  M --------------- */
    public function getFromCRM($module, string $criteria, string $valueOfCriteria, bool $mandatory=false)
    {
        if (!$this->isModule($module)) {
            printLog(__METHOD__, 'the module "'.$module.'" is not found.', true);
            throw new ZohoException('Module "'.$module.'" not found.');
        }

        $this->getCleApi();

        if ($mandatory)
            $criteria = strtolower($criteria);

        if ($mandatory === true)
            $url = $this->api_domain.'/crm/v2/'.$module.'/search?'.$criteria.'='.$valueOfCriteria;
        else
            $url = $this->api_domain.'/crm/v2/'.$module.'/search?criteria=%28'.$criteria.':equals:'.$valueOfCriteria.'%29';

        $res = $this->gestionRequest('GET', $url);

        if ($res->getStatusCode() == 204) {
            printLog(__METHOD__, 'Value "'.$valueOfCriteria.'" not found for "'.$value.'".', true);
            throw new ZohoException('Value "'.$valueOfCriteria.'" not found for "'.$value.'".');
        } else if ($res->getStatusCode() != 200) {
            printLog(__METHOD__, 'Unexpected error (id: 01):'.
                                'module : "'.$module.'"\n\t'.
                                'critere: "'.$criteria.'"\n\t'.
                                'value  : "'.$valueOfCriteria.'"\n\t'.
                                'URL    : "'.$url.'"\n\t'.
                                'code   : "'.$res->getStatusCode().'"', true);
            throw new ZohoException('Unexpected Error. id: 01');
        }

        $this->historic[] = ['method' => 'GET',
                             'url' => $url,
                             'module' => $module,
                             'header' => $this->defaultHeader,
                             'result' => $res->getbody()];

        return (json_decode($res->getBody(), true)['data'][0]);
    }

    /* /!\ ----------= DO NOT OVERUSE THIS METHOD =---------- /!\ */
    /* /!\ --------= IT TAKE AN ETERNITY TO RESPOND =-------- /!\ */
    public function getAllFromCRM($module)
    {
        if (!$this->isModule($module)) {
            printLog(__METHOD__, 'the module "'.$module.'" is not found.', true);
            throw new ZohoException('Module "'.$module.'" not found.');
        }
        $this->getCleApi();

        $url = $this->api_domain.'/crm/v2/'.$module;

        $res = $this->gestionRequest('GET', $url);

        if ($res->getStatusCode() != 200) {
            printLog(__METHOD__, 'Unexpected error (id: 01):'.
                                'module : "'.$module.'"\n\t'.
                                'URL    : "'.$url.'"\n\t'.
                                'code   : "'.$res->getStatusCode().'"', true);
            throw new ZohoException('Unexpected Error. id: 02');
        }

        $this->historic[] = ['method' => 'GET',
                             'url' => $url,
                             'module' => $module,
                             'header' => $this->defaultHeader,
                             'result' => $res->getbody()];

        return (json_decode($res->getBody(), true)['data']);
    }

    public function updateToCRM_NoId($module, array $data, string $criteria, string $value, bool $mandatory=false)
    {
        $dataCRM = $this->getFromCRM($module, $criteria, $value, $mandatory);
        if ($dataCRM == false)
            return (false);

        $data['id'] = $dataCRM['id'];

        return ($this->updateToCRM($module, $data));
    }

    public function updateToCRM($module, array $data)
    {
        if (!isset($data['id'])) {
            printLog(__METHOD__, 'unknow id: '.$data['id'], true);
            throw new ZohoException('Id not found');
        }
        if (!$this->isModule($module)) {
            printLog(__METHOD__, 'the module "'.$module.'" is not found.', true);
            throw new ZohoException('Module "'.$module.'" not found.');
        }
        $this->getCleApi();

        $url = $this->api_domain.'/crm/v2/'.$module;
        $header = [
            'headers' => [
                'Authorization' => 'Bearer '.$this->token,
                'Cache-Control' => 'no-cache',
                'Content-Type'  => 'application/json'
            ],
            'json' => [
                'data' => [ $data ],
                'trigger' => [ 'approval' ],
                'wf_trigger' => true
            ]
        ];

        $res = $this->gestionRequest('PUT', $url, $header);

        if ($res->getStatusCode() != 200) {
            printLog(__METHOD__, 'Unexpected error (id: 03):'.
                                'module : "'.$module.'"\n'.
                                'URL    : "'.$url.'"\n'.
                                'code   : "'.$res->getStatusCode().'"\n'.
                                'body   : "'.$res->getBody().'"', true);
            throw new ZohoException('Unexpected Error (id: 02)');
        }

        $this->historic[] = ['method' => 'PUT',
                             'module' => $module,
                             'url' => $url,
                             'header' => $this->defaultHeader,
                             'data' => $data];

        if (json_decode($res->getBody(), true)['data'][0]['code'] == 'SUCCESS')
            return (true);
        return (false);
    }

    public function insertToCRM($module, array $data)
    {
        if (!$this->isModule($module)) {
            printLog(__METHOD__, 'the module "'.$module.'" is not found.', true);
            throw new ZohoException('Module "'.$module.'" not found.');
        }
        $this->getCleApi();

        $url = $this->api_domain.'/crm/v2/'.$module;
        $header = [
            'headers' => [
                'Authorization' => 'Bearer '.$this->token,
                'Cache-Control' => 'no-cache',
                'Content-Type'  => 'application/json'
            ],
            'json' => [
                'data' => [ $data ],
                'trigger' => [ 'approval' ],
                'wf_trigger' => true
            ]
        ];

        printLog(__METHOD__, 'Requesting to zoho...');
        $res = $this->gestionRequest('POST', $url, $header);

        if ($res->getStatusCode() != 201) {
            printLog(__METHOD__, 'Unexpected error (id: 03):'.
                                'module : "'.$module.'"\n'.
                                'URL    : "'.$url.'"\n'.
                                'code   : "'.$res->getStatusCode().'"\n'.
                                'body   : "'.$res->getBody().'"', true);
            throw new ZohoException('Unexpected Error (id: 02)');
        }

        printLog(__METHOD__, 'body: '.$res->getBody());

        $this->historic[] = ['method' => 'POST',
                             'module' => $module,
                             'url' => $url,
                             'header' => $this->defaultHeader,
                             'data' => $data];

        if (json_decode($res->getBody(), true)['data'][0]['code'] == 'SUCCESS')
            return (true);
        return (false);
    }
}
